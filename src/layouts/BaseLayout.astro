---
import { themeConfig } from '@/config'
import { ClientRouter } from 'astro:transitions'
import ThemeManager from '@/components/ui/ThemeManager.astro'
import FaviconThemeSwitcher from '@/components/ui/FaviconThemeSwitcher.astro'
import TransitionWrapper from '@/components/layout/TransitionWrapper.astro'
import type { LayoutProps } from '@/types'

type Props = LayoutProps

const { type = 'page' } = Astro.props
const language = themeConfig.site.language || 'en-US'
const contentWidth = themeConfig.general.contentWidth
const fadeAnimation = themeConfig.general.fadeAnimation
const widthValue = Math.min(parseFloat(contentWidth), 50)
const shouldUseCustomWidth = widthValue > 25
const finalWidth = shouldUseCustomWidth ? `${widthValue}rem` : '25rem'
---

<html lang={language}>
  <head>
    {fadeAnimation && <ClientRouter />}
    <slot name="head" />
  </head>
  <body
    data-centered={themeConfig.general.centeredLayout}
    style={`
      max-width: ${finalWidth};
      ${shouldUseCustomWidth ? `--content-width: ${widthValue}rem;` : ''}
    `}
  >
    <div class="scroll-progress" id="scroll-progress"></div>
    <ThemeManager />
    <FaviconThemeSwitcher />

    {
      fadeAnimation ? (
        <TransitionWrapper type={type} class="layout-wrapper">
          <slot />
        </TransitionWrapper>
      ) : (
        <div class="layout-wrapper">
          <slot />
        </div>
      )
    }

    <script>
      // Scroll progress indicator
      function updateScrollProgress() {
        const scrollTop = window.scrollY
        const docHeight = document.documentElement.scrollHeight - window.innerHeight
        const scrollPercent = (scrollTop / docHeight) * 100
        const progressBar = document.getElementById('scroll-progress')
        if (progressBar) {
          progressBar.style.width = scrollPercent + '%'
        }
      }

      // Intersection Observer for scroll animations
      function initScrollAnimations() {
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        }

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add('in-view')
            }
          })
        }, observerOptions)

        // Observe all elements with scroll-animate class
        document.querySelectorAll('.scroll-animate').forEach((el) => {
          observer.observe(el)
        })
      }

      // Initialize on page load
      document.addEventListener('DOMContentLoaded', () => {
        initScrollAnimations()
        updateScrollProgress()
      })

      // Update scroll progress on scroll
      window.addEventListener('scroll', updateScrollProgress, { passive: true })

      // Re-initialize for page transitions
      document.addEventListener('astro:page-load', () => {
        initScrollAnimations()
        updateScrollProgress()
      })
    </script>
  </body>
</html>

<style is:global>
  .layout-wrapper {
    display: flex;
    flex-direction: column;
    min-height: calc(100vh - 7.5rem);
  }

  @media (max-width: 768px) {
    .layout-wrapper {
      min-height: calc(100vh - 5.5rem);
    }
  }
</style>
